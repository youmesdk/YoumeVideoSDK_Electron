declare class YouMeVideo {
    constructor();
    static getInstance(): YouMeVideo;

    init(strAppKey: string, strAPPSecret: string, serverRegionId: number, pExtServerRegionName: string, callback: Function): number;
    joinChannelSingleMode(strUserID: string, strChannelID: string, eUserRole: number,autoRecv:boolean = false, callback: Function): number;
    leaveChannelAll(callback: Function): number;
    setMicrophoneMute(bOn: boolean, callback: Function): void;
    getMicrophoneMute(): boolean;
    setSpeakerMute(bOn: boolean, callback: Function): void;
    getSpeakerMute(): boolean;
    startCapture(callback: Function): number;
    stopCapture(callback: Function): number;
    setExternalInputMode(bInputModeEnabled: boolean): void;
    setAVStatisticInterval(interval: number): void;
    setVideoLocalResolution(width: number, height: number): number;
    setVideoNetResolution(width: number, height: number): number;
    setMixVideoSize(width: number, height: number): void;
    videoEngineModelEnabled(enabeld: boolean): void;
    getCameraCount(): number;
    getCameraName(cameraid: number): string;
    setOpenCameraId(cameraid: number): number;
    setVideoCallback(): number;
    setAutoSendStatus(bAutoSend: boolean): void;
    setVolume(uiVolume: number): void;
    getVolume(): number;
    getVideoFrame(userId: string, len: number, width: number, height: number): string;
    getVideoFrameNew(userId: string, len: number, width: number, height: number, fmt: number): number;
    pauseChannel(callback: Function): number;
    resumeChannel(callback: Function): number;
    maskVideoByUserId(userid: string, mask: boolean, callback: Function): number;
    getSDKVersion(): number;
    setToken(strToken: string): void;
    setAudioQuality(quality: number): void;
    setOtherMicMute(userid: string, mute: boolean): number;
    setOtherSpeakerMute(userid: string, mute: boolean): number;
    setListenOtherVoice(userid: string, ison: boolean): number;
    setLogLevel(consoleLevel: number, fileLevel: number): number;
    setServerRegion(serverRegionId: number, strExtRegionName: string): void;
    setTestConfig(bTest: boolean): void;
    setOutputToSpeaker(bOutputToSpeaker: boolean): number;
    setUseMobileNetworkEnabled(bEnabled: boolean): void;
    getUseMobileNetworkEnabled(): number;
    setUserLogPath(strFilePath: string): number;
    playBackgroundMusic(strFilePath: string, bRepeat: boolean): number;
    pauseBackgroundMusic(): number;
    resumeBackgroundMusic(): number;
    stopBackgroundMusic(): number;
    setBackgroundMusicVolume(vol: number): number;
    setHeadsetMonitorOn(micEnabled: boolean, bgmEnabled: boolean): number;
    setReverbEnabled(bEnabled: boolean): number;
    setVadCallbackEnabled(enabled: boolean): number;
    setMicLevelCallback(maxLevel: number): number;
    setFarendVoiceLevelCallback(maxLevel: number): number;
    setReleaseMicWhenMute(enabled: boolean): number;
    setRecordingTimeMs(timeMs: number): void;
    setPlayingTimeMs(timeMs: number): void;
    setServerMode(mode: number): void;
    requestRestApi(strCommand: string, strQueryBody: string, callback: Function): number;
    getChannelUserList(strChannelID: string, maxCount: number, notifyMemChange: boolean): number;
    setUserRole(userRole: number): number;
    getUserRole(): number;
    isBackgroundMusicPlaying(): boolean;
    isInited(): boolean;
    isInChannel(pChannelID: string): boolean;
    sendMessage(pChannelID: string, pContent: string, callback: Function): number;
    kickOtherFromChannel(pUserID: string, pChannelID: string, lastTime: number): number;
    openVideoEncoder(pFilePath: string): number;
    inputAudioFrame(data: string, len: number, timestamp: number): number;
    inputVideoFrame(data: string, len: number, width: number, height: number, fmt: number, rotation: number, mirror: number, timestamp: number): number;
    stopInputVideoFrame(): number;
    setVideoFps(fps: number): number;
    switchCamera(): number;
    resetCamera(): number;
    setCaptureFrontCameraEnable(enable: boolean): number;
    setExternalInputSampleRate(inputSampleRate: number, mixedCallbackSampleRate: number): number;
    setVideoCodeBitrateForSecond(maxBitrate: number, minBitrate: number): void;
    getCurrentVideoCodeBitrate(): number;
    setVideoHardwareCodeEnable(bEnable: boolean): void;
    getVideoHardwareCodeEnable(): number;
    setVideoNoFrameTimeout(timeout: number): number;
    queryUsersVideoInfo(userList: string): number;
    setUsersVideoInfo(videoinfoList: string): number;
    openBeautify(open: boolean): number;
    beautifyChanged(param: number): number;
    stretchFace(stretch: boolean): number;
    releaseMicSync(): boolean;
    resumeMicSync(): boolean;
    updateCanvas(userid: string, canvasid: string): void;
    on(event: string, callback: Function): void;
    getVideoOnUser():any;
}